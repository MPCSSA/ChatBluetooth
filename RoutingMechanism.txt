MECCANISMO DI ROUTING BLUETOOTH

. Problema: notificare ad altri dispositivi il collegamento di un nuovo dispositivo alla rete.
  Soluzione: implementare un meccanismo di UPDATE. Il dispositivo appena connesso fa una discovery e trova altri dispositivi, mandando un GREETINGS MSG ai dipositivi con cui è connesso per segnalare la sua esistenza e mandare informazioni su sé stesso. I dispositivi contattati procedono inoltrando ai loro contatti diretti un UPDATE MSG contenente il MAC address del nuovo nodo e le informazioni volatili sul contatto, che viene fatto rimbalzare fino a che tutta la rete di dispositivi è stata aggiornata. Contemporaneamente, i dispositivi direttamente connessi al nuovo nodo mandano un UPDATE MSG contenente i MAC  di tutti i nodi raggiungibili attraverso di essi, e le omonimie vengono gestite attraverso una comparazione dell'attributo bounces della classe ChatUser. Terminata l'update, il nuovo dispositivo inoltra infine ad ogni nodo direttamente connesso un update msg contenente quei dispositivi nella rete raggiungibili attraverso di esso (senza inoltrare quegli oggetti ChatUser che hanno come mac_next_node il nodo in questione). Il processo di invio dei msg termina quando la rete diventa stabile e nessun nuovo collegamento rimpiazza il precedente.
Questo supponendo che tutti i MAC ricevuti dai nodi abbiano un riscontro nella tabella Users dell'applicazione; in caso contrario, per ogni MAC address non riconosciuto, il generico dispositivo manda un REQUEST INFO MSG per richiedere ai nodi interessati le informazioni di contatto per poter creare un nuovo record nella tabella. Il messaggio di risposta (BLUECARD MSG) contiene le informazioni riguardo identità, username e altre informazioni persistenti.

. Problema: riparazione della rete al logout di un dispositivo.
  Soluzione: implementare un meccanismo di Drop&Repair per restaurare i contatti nella rete.
  Ogni volta che un dispositivo si disconnette dalla rete, i nodi vicini procedono col cancellare ogni istanza di ChatUser associata a quel nodo, per 
  poi mandare ad ogni nodo vicino una Drop request: una lista di nodi destinazione da eliminare se e solo se la route presente bella lista del nodo contattato passa attraveeso il nodo contattante. Nel caso sia disponibile una route alternativa, questa viene subito segnalata al nodo contattante (repair message), che innesca una update cascade che dovrebbe riparare l'intera rete. La rete torna stabile quando le drop request non vengono più inoltrate e la repair cascade è terminata o quando si generano m sottoreti da quella di partenza.
